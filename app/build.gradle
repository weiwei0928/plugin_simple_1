import org.json.JSONObject

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.ww.easy.plugin'
}
pluginMeta {
    version = "1.0.1"
    name = "plugin_sample_1"
    mainClass = "com.ww.plugin.MainActivity"
    innerPlugin = false
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.ww.plugin"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //start-----插件相关-------------------
//    aaptOptions.additionalParameters '--PLUG-resoure-proguard', '--PLUG-resoure-id', '0x7d'
    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x76'
    }
    //end-------插件相关-------------------

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly 'androidx.core:core-ktx:1.2.0'
    compileOnly 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    compileOnly 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}

task writePluginMeta(dependsOn: ['makePluginMeta']) {
    doFirst {
        println("dofirst")
    }
}

def makePluginMetaTask = task("makePluginMeta") {
    doLast {
        File file = getProject().file("src/main/assets/plugin.meta")
        file.parentFile.mkdirs()
        file.withWriter {
            it << buildPluginMeta()
        }
    }
}

//将生成配置文件功能放到gradle插件中了
//project.afterEvaluate {
//    Task generateDebugAssets = getProject().tasks.generateDebugAssets
//    Task generateReleaseAssets = getProject().tasks.generateReleaseAssets
//    generateDebugAssets.dependsOn(makePluginMetaTask)
//    generateReleaseAssets.dependsOn(makePluginMetaTask)
//}
def buildPluginMeta() {
    JSONObject
    def jsonObject = new JSONObject()
    println(project.ext.version)
    jsonObject.put("version", project.ext.version)
    jsonObject.put("name", project.ext.name)
    jsonObject.put("mainClass", project.ext.mainClass)
    jsonObject.put("innerPlugin", project.ext.innerPlugin)
    print(jsonObject.toString())
    return jsonObject.toString()
}

ext {
    version = "1"
    name = "plugin_sample_1"
    mainClass = "com.ww.plugin.MainActivity"
    innerPlugin = true
}